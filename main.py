from operator import itemgetter
from data import *


def task1(src):
    """Г1 - список всех библиотек, адрес которых начинается с буквы А, и список книг в них"""
    # отбираем удовлетворяющие условию библиотеки
    chosen_lbs = list(filter(lambda l: l.addr[0:1] == 'А', librs))
    tsk_1 = {}
    # для каждой выбранной библиотеки формируем список книг, которые в ней есть
    for l in chosen_lbs:
        tsk_1[l.addr] = list((i[1], i[2]) for i in src if i[0] == l.addr)
    return tsk_1


def task2(src):
    """Г2 - список библиотек с максимальным годом издания книги
       в каждой библиотеке, отсортированный по максимальному году"""
    tsk_2_unsorted = []  # вспомогательный результирующий список
    for l in librs:
        # список годов издания книг в данной библиотеке
        l_yrs = list(i[2] for i in src if i[0] == l.addr)
        if len(l_yrs) > 0:
            # найдём максимальный год издания
            m_year = max(l_yrs)
            # добавим пару библиотека-год к результирующему списку
            tsk_2_unsorted.append((l.addr, m_year))
    # отсортируем результирующий список
    tsk_2 = sorted(tsk_2_unsorted, key=itemgetter(1), reverse=True)
    return tsk_2


def task3(src):
    """Г3 - вывести список всех связанных книг и библиотек,
        отсортированный по библиотекам (связь многие-ко-многим)"""
    tsk_3 = sorted(src, key=itemgetter(1), reverse=True)
    return tsk_3


def main():
    # основная функция
    # связь один-ко-многим
    """Г1 - список всех библиотек, адрес которых начинается с буквы А, и список книг в них"""
    print('Задание Г1')
    print(task1(one_many))

    """Г2 - список библиотек с максимальным годом издания книги
    в каждой библиотеке, отсортированный по максимальному году"""
    print('\nЗадание Г2')
    print(task2(one_many))

    """Г3 - вывести список всех связанных книг и библиотек,
    отсортированный по библиотекам (связь многие-ко-многим)"""
    print('\nЗадание Г3')

    print(task3(many_many))


if __name__ == '__main__':
    main()

